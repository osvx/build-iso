#!/bin/bash

# environment variables for mk.livecd/live-helper scripts

declare -x LB_APT="aptitude"
declare -x LB_ARCHITECTURE="amd64"
declare -x LB_BOOTAPPEND_LIVE=""
declare -x LB_BOOTAPPEND_INSTALL=""
declare -x LB_BOOTLOADER="syslinux"
declare -x LB_BOOTSTRAP="debootstrap"
declare -x LB_BOOTSTRAP_FLAVOUR="minimal"
declare -x LB_CHROOT_FILESYSTEM="squashfs"
declare -x LB_DISTRIBUTION="trusty"
declare -x LB_HOSTNAME="osvx"
declare -x LB_INITRAMFS="live-initramfs"
declare -x LB_ISO_APPLICATION="OS/VX"
declare -x LB_ISO_PUBLISHER="OS/VX development team; http://www.osvx.net/;"
declare -x LB_ISO_VOLUME="OS/VX "
declare -x LB_LANGUAGE="en"
#declare -x LB_LINUX_PACKAGES="linux-image"
#declare -x LB_LINUX_FLAVOURS=""
declare -x LB_MEMTEST="none"
declare -x LB_MIRROR_BINARY_SECURITY=''
declare -x LB_MIRROR_BOOTSTRAP_SECURITY=''
declare -x LB_MIRROR_CHROOT_SECURITY=''
declare -x LB_PACKAGES="none"
declare -x LB_ARCHIVES="main contrib universe"
declare -x LB_SECURITY="false"
declare -x LB_SYSLINUX_CFG="templates/isolinux.cfg"
declare -x LB_SYSLINUX_MENU="false"
declare -x LB_SYSLINUX_TIMEOUT="50"
declare -x LB_UNION_FILESYSTEM="unionfs"
declare -x create_xensourcevm="false"
declare -x VYATTA_DEV_BUILD="false"
declare -x VYATTA_COMMUNITY_BUILD="false"
declare -x VYATTA_BUILD_BRANCH="projectx"
declare -x BUILD_TIME=""
declare -x OSVX_DEBIAN_BOOTSTRAP_MIRROR="http://us.archive.ubuntu.com/ubuntu/"
declare -x OSVX_DEBIAN_MIRROR="http://us.archive.ubuntu.com/ubuntu/"
declare -x OSVX_PACKAGE_MIRROR="http://packages.osvx.net/osvx/"

## packages needed for the chroot step
LB_BOOTSTRAP_INCLUDE="locales"
LB_BOOTSTRAP_INCLUDE+=",apt-utils,aptitude" # apt
LB_BOOTSTRAP_INCLUDE+=",patch"              # for chroot_local-patches
export LB_BOOTSTRAP_INCLUDE

## packages not needed in bootstrap
declare -x LB_BOOTSTRAP_EXCLUDE="dhcp3-common,dhcp3-client"

declare -x LB_VOLATILE="false"
declare -x LB_DEBIAN_INSTALLER="false"
declare -x LB_APT_RECOMMENDS="false"
declare -x LB_BUILD_WITH_CHROOT="false"
declare -x LB_CACHE_INDICES="false"
declare -x LB_SYSLINUX_SPLASH="none"
declare -x DEBIAN_FRONTEND="noninteractive"

if [[ "$PATH" != */sbin* ]] ; then
  PATH+=:/usr/local/sbin:/usr/sbin:/sbin
  export PATH
fi

if [ -n "$BUILD_TIME" ]; then
  HUMANTIME=$(date -d "$BUILD_TIME" -u)
  CURYEAR=$(date -d "$BUILD_TIME" -u +'%Y')
  VERTIME=$(date -d "$BUILD_TIME" -u +'%Y.%m.%d')
fi

: ${HUMANTIME:=$(date -u)}
: ${CURYEAR:=$(date +'%Y')}
: ${VERTIME:=$(date +'%Y.%m.%d')}
: ${ORGANIZATION:=osvx.net}
: ${LANGUAGE:=${LB_LANGUAGE:-en}}
: ${LC_ALL:=C}
export LANGUAGE
export LC_ALL

BUILDID=`cat buildid 2>/dev/null` || true
if [ ! "$BUILDID" ]; then
  BUILDID=`git log -1 --pretty=format:%h 2>/dev/null` || true
  BUILDID=`date -u +%y%m%d%H%M`-${BUILDID}
fi

BUILTBY=`cat buildby 2>/dev/null` || true
if [ -z "$BUILTBY" ]; then
  if [ "$GIT_COMMITTER_EMAIL" ] ; then
    BUILTBY=$GIT_COMMITTER_EMAIL
  elif [ "$GIT_AUTHOR_EMAIL" ] ; then
    BUILTBY=$GIT_AUTHOR_EMAIL
  else
    user_email=`git config user.email 2>/dev/null` || true
    if [ "$user_email" ] ; then
      BUILTBY=$user_email
    elif [ "$SUDO_USER" ] ; then
      # Try to get sudo user email first
      user_email=`sudo -u $SUDO_USER git config user.email 2>/dev/null` || true
      if [ "$user_email" ] ; then
	BUILTBY=$user_email
      else
        BUILTBY=$SUDO_USER@$ORGANIZATION
      fi
    else
      BUILTBY=$USER@$ORGANIZATION
    fi
  fi
fi

LB_ISO_VOLUME+="$BUILDID"
export LB_ISO_VOLUME


# functions for mk.livecd
#
# Copyright 2013 Vyatta, Inc

clean_mounts() 
{               
  for m in proc-live sysfs-live devpts-live ; do
    if grep -q $m /proc/mounts ; then
      echo I: unmounting $m
      umount $m || true
    fi
  done
}

# Returns version string used in "Description"
# e.g. "OS/VX 1.0.0 (projectx-1)"
get_full_version () {
    local branch=$(git branch | awk '/^\*/ {print $2}')
    echo "OS/VX $1 ($branch)"
}

# Returns numeric version from ./version files
# e.g. "1.0.0"
get_version () {
  if [ -f version ]; then
    cat version
  fi
}

get_dev_version () {
  local cur_time=$(date +%m%d%H%M)
  local branch=$(git branch | awk '/^\*/ {print $2}')
  # note: this is used as the debian package version string, so
  # avoid problematic chars.
  # use a string starting with a numeric character for
  # full-upgrade compatibility.
  echo -n "999.$branch.$cur_time" | tr -d '_+-'
}

mk_version_package ()
{
    local savedir="$PWD"
    local etcdir="$savedir"/chroot/opt/vyatta/etc
    local config_src=community
    local tmpdir=/tmp/$$-version
    local vf=$tmpdir/opt/vyatta/etc
    local arch=$(dpkg-architecture -qDEB_BUILD_ARCH)

    NUMERIC_VERSION=$(get_version)
    FULL_VERSION=$(get_full_version "$NUMERIC_VERSION")

    if [ -z "$NUMERIC_VERSION" ]; then
      NUMERIC_VERSION=$VYATTA_DEV_VERSION
      FULL_VERSION=$VYATTA_DEV_VERSION
      echo "I: Build type: DEVELOPMENT, version $FULL_VERSION"
    else
      echo "I: Build type: RELEASE, version $FULL_VERSION"
    fi

    mkdir -p $vf/config

    cp templates/$config_src/config.boot.default $vf/.

    cd $tmpdir
    mkdir DEBIAN

    echo I: generating build record
    cat <<-EOF > $vf/iso-build.txt
Built by:     $BUILTBY
Built on:     $HUMANTIME
Build ID:     $BUILDID
EOF

    # backwards compatible symlink
    ln -nsf iso-build.txt $vf/build.txt
    #echo "$BUILDID">$savedir/iso-label # is this needed?

    echo I: generating package list
    chroot "$savedir"/chroot /opt/vyatta/bin/save-package-report
    mv $etcdir/deb-versions.txt $vf/.

#    ( cd "$savedir"/.. ; git submodule status 2>/dev/null ) \
#         > $vf/iso-submodules.txt
#    [ -s $vf/iso-submodules.txt ] || cp "$savedir"/iso-submodules.txt $vf/. 2>/dev/null
    touch $vf/iso-submodules.txt

    echo vyatta-version ${NUMERIC_VERSION} >> $vf/deb-versions.txt

    echo "Version:      OS/VX ${NUMERIC_VERSION}" > $vf/version
    echo "Description:  ${FULL_VERSION}" >> $vf/version
    echo "Copyright:    ${CURYEAR} OS/VX development team" >> $vf/version
    ln -nsf version $vf/version-virt

    (
        echo "Package: vyatta-version"
        echo "Version: ${NUMERIC_VERSION}"
        echo "Architecture: ${arch}"
        echo "Maintainer: OS/VX development team <maintainers@osvx.net>"
        echo "Essential: no"
        echo "Section: base"
        echo "Replaces: vyatta-version, vc-version, vc2-version, devel-version, vyatta-cfg-system"
        echo -n Suggests: 
        <$vf/deb-versions.txt sed -e 's/ *\([^ ]*\)$/(>=\1),/' -e 's/^/ /'
        echo " nano"
        echo Description: "$prefix version file"
        echo " This package sets up the version file and a file containing"
        echo " the list of recommended packages (with the recommended versions)"
    ) >DEBIAN/control

    vpkgname="vyatta-version_${NUMERIC_VERSION}_${arch}.deb"
    mkdir ../$$-deb
    dpkg --build . "../$$-deb/$vpkgname" >/dev/null

    rm -rf $tmpdir
    cd $savedir
    cp /tmp/$$-deb/$vpkgname chroot/
    mv /tmp/$$-deb/$vpkgname config/packages.chroot/.
    # dpkg should be done inside chroot
    chroot chroot dpkg -i /$vpkgname
    rm chroot/$vpkgname
    rm -rf /tmp/$$-deb
}

clean_up_xensource ()
{
  # clean up the mounts
  echo I: unmounting the image file
  umount xensource/pimage
  echo I: releasing loop device $loop
  losetup -d $loop
}

# Create the Vyatta domU partition image
vyatta-xensource-partition-image ()
{
  echo I: creating XenSource partition image
  rm -rf xensource
  mkdir -p xensource/pimage

  arch=$(dpkg-architecture -qDEB_BUILD_ARCH)
  NUMERIC_VERSION=$(get_version)
  if [ -z "$NUMERIC_VERSION" ]; then
    NUMERIC_VERSION=999
  fi

  # preallocated image
  # dd if=/dev/zero of=xensource/osvx-xensource-$NUMERIC_VERSION-$arch.img bs=1024k count=4000
  # sparse image
  dd if=/dev/zero of=xensource/osvx-xensource-$NUMERIC_VERSION-$arch.img bs=1k seek=4096k count=1

  # allocate loop device for file
  loop=$(losetup -f)
  losetup $loop xensource/osvx-xensource-$NUMERIC_VERSION-$arch.img || echo E: unable to allocate loop device

  # create filesystem
  mke2fs -j $loop

  # mount loop device and copy root image
  echo I: mounting image file
  mount $loop xensource/pimage
  echo I: copying root to image partition
  cp -aR chroot/* xensource/pimage/

  # stage the chroot
  # need to edit the inittab get rid of t0 and add h0
  # setup config.boot if neccessary
  
  # we need an "unwrapped" verison of the kernel image for pygrub 
  echo I: fixing partition image kernel
  oimg=$(find xensource/pimage/boot/ -maxdepth 1 \
          -name 'vmlinuz-*-vyatta-virt' | head -1)
  if [ -z "$oimg" ]; then
    echo E: Cannot find vyatta-virt kernel in chroot
    clean_up_xensource
    return 1
  fi
  nimg=${oimg/vmlinuz/vmlinux}
  gzoff=$(../tools/find-string-index.pl '\x1f\x8b\x08\x00' $oimg)
  if [ -z "$gzoff" ]; then
    echo E: Cannot unwrap $oimg
    clean_up_xensource
    return 1
  fi
  dd if=$oimg of=$nimg.gz bs=1 skip=$gzoff
  if ! file $nimg.gz | grep -q 'gzip compressed data'; then
    echo E: Cannot unwrap $oimg
    clean_up_xensource
    return 1
  fi
  zcat $nimg.gz > $nimg.0
  if ! file $nimg.0 | grep -q 'ELF ..-bit LSB.*, stripped'; then
    echo E: Cannot unwrap $oimg
    clean_up_xensource
    return 1
  fi
  gzip -c $nimg.0 > $nimg
  rm -f $nimg.gz $nimg.0

  # create the default domU configuration file
  cat <<-EOF > xensource/osvx-xensource-$NUMERIC_VERSION.cfg
	name='osvx-$NUMERIC_VERSION'
	bootloader='/usr/bin/pygrub'
	on_reboot='restart'
	on_shutdown='destroy'
	on_crash='destroy'
	image_name='osvx-$NUMERIC_VERSION'
	disk=['tap:aio:/var/xen/osvx-xensource-$NUMERIC_VERSION-$arch.img,xvda1,w']
	vcpus=1
	memory=512
	EOF

  xen_kernel_version=$(ls xensource/pimage/boot/vmlinu[xz]-* | sed 's:xensource/pimage/boot/::g' | sort )

  (
      # stage the grub menu.lst for pygrub.
      echo -e "timeout\t5"
      echo
      for version in $xen_kernel_version; do
          echo -e "title\t$version"
          echo -e "root\t(hd0,0)"
          echo -e "kernel\t/boot/$version root=/dev/xvda1 ro console=hvc0"
          iversion=$(echo $version | sed 's/vmlinu[xz]-//g')
          echo -e "initrd\t/boot/initrd.img-$iversion"
          echo
      done
  ) >"xensource/pimage/boot/grub/menu.lst"

  # clean up the inittab
  # remove T0 so it doesn't respawn needlessly
  sed -i -e 's/T0/#T0/' xensource/pimage/etc/inittab
  # add the xen pv console
  echo -e "# xen console \nh0:12345:respawn:/sbin/getty 38400 hvc0" >> xensource/pimage/etc/inittab

  # set /etc/hostname
  rm -f xensource/pimage/etc/hostname
  echo vyatta > xensource/pimage/etc/hostname
  # set /etc/hosts
  rm -f xensource/pimage/etc/hosts
  echo 127.0.0.1 localhost vyatta > xensource/pimage/etc/hosts
  # set /etc/fstab
  rm -f xensource/pimage/etc/fstab
  echo -e "/dev/xvda1\t/\text3\tdefaults\t0 1" > xensource/pimage/etc/fstab

  clean_up_xensource

  echo I: compressing XenSource partition image file
  gzip xensource/osvx-xensource-$NUMERIC_VERSION-$arch.img
}

get_chroot_kernel_version ()
{
  local kfile=$(find chroot/boot -type f -name 'vmlinuz-*' \
                | head -1 2>/dev/null)
  echo -n ${kfile##chroot/boot/vmlinuz-}
}

create_default_grub_config ()
{
  local gdir=chroot/opt/vyatta/etc/grub
  local gfile=$gdir/default-union-grub-entry
  local tmpl=templates/grub/default-union-grub-template
  local kver=$(get_chroot_kernel_version)
  if [ -z "$kver" ]; then
    echo 'E: Cannot find kernel in chroot.'
    echo 'E: Default grub config not created.'
    return
  fi
  mkdir -p $gdir
  sed "s/\\\$RVER\\\$/$VVERSION/g;s/\\\$KVER\\\$/$kver/g" $tmpl > $gfile
}

set_up_lh_config ()
{
  if [ -z "$VYATTA_BUILD_BRANCH" ]; then
    echo E: Build branch is not set
    exit 1
  fi
  local branch=$VYATTA_BUILD_BRANCH

  # get the branch/repo related parameters if any
  if [ -f config.osvx/vbuild.conf ]; then
    source config.osvx/vbuild.conf
  fi

  # Remove trailing /'s from URLs
  OSVX_DEBIAN_MIRROR=`echo $OSVX_DEBIAN_MIRROR | sed -re 's!(.*[^/])/+$!\1!'`
  OSXV_DEBIAN_BOOTSTRAP_MIRROR=`echo $OSVX_DEBIAN_BOOTSTRAP_MIRROR | sed -re 's!(.*[^/])/+$!\1!'`
  OSVX_PACKAGE_MIRROR=`echo $OSVX_PACKAGE_MIRROR | sed -re 's!(.*[^/])/+$!\1!'`

  # set up the debian repo
  LB_MIRROR_BINARY=$OSVX_DEBIAN_MIRROR
  LB_MIRROR_BOOTSTRAP=$OSVX_DEBIAN_BOOTSTRAP_MIRROR
  LB_MIRROR_CHROOT_SECURITY=$OSVX_DEBIAN_MIRROR
  LB_MIRROR_BINARY_SECURITY=$OSVX_DEBIAN_MIRROR

  echo "I: Using Debian mirror $LB_MIRROR_BINARY"
  echo "I: Using Debian bootstrap mirror $LB_MIRROR_BOOTSTRAP"

  export LB_MIRROR_BINARY LB_MIRROR_BOOTSTRAP

  local dev_repo_root=$OSVX_PACKAGE_MIRROR/osvx
  local repo_dir=unstable
  if ! eval "$VYATTA_DEV_BUILD"; then
    # not dev build => use testing.
    #repo_dir=testing
    repo_dir=unstable
  fi

  echo "I: Using OS/VX package mirror $dev_repo_root"

  # prepare the config files for live helper
  if [ -n "$APT_PROXY" ]; then
    APT_PROXY_OPT="--apt-http-proxy \"$APT_PROXY\""
  fi

  lb config $APT_PROXY_OPT \
	--archive-areas "main universe multiverse restricted" \
	--parent-archive-areas "main universe multiverse restricted" \
	--apt-indices false \
	--apt-source-archives false \
	--apt-recommends false \
	--debug \
	--initramfs live-boot \
	--mode debian \
	--chroot-filesystem squashfs \
	--syslinux-theme live-build \
	--initsystem sysvinit \
	--firmware-chroot false \
	--firmware-binary false \
	--linux-flavour "osvx" \
	--security true \
	--keyring-packages "debian-archive-keyring osvx-keyring"
  (
    cd config.osvx
    cp -af package-lists bootloaders hooks includes.chroot \
      ../config/
  )

#  if ! eval "$create_xendomzero"; then
#    rm -f config/chroot_local-hooks/*xen*
#  fi
#
#  # set up "vyatta-kernel" packages list according to flavor
#  kplist="config/chroot_local-packageslists/vyatta-kernel.$LB_LINUX_FLAVOURS"
#  if [ -f "$kplist" ]; then
#    # list exists. set it up.
#    mv -f $kplist config/chroot_local-packageslists/vyatta-kernel.list
#  fi
}

